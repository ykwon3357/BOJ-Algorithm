# 150m
# 비트마스킹
# 가로를 1 세로를 0
# 0000 ~ 1111 모든 경우 다 있음
n, m = map(int, input().split())
arr = [list(map(int, input())) for _ in range(n)]
maxSum = 0

for i in range(1<<n*m): # 각 칸은 가로or세로 2가지 경우의 수 가 있으므로 2^(n*m)가지
    total, rowSum, colSum = 0, 0, 0

    # 가로 합
    for row in range(n):
        for col in range(m):
            idx = row*m + col # 2차원 배열을 1차원으로 늘렸을때의 인덱스

            if i & (1<<idx) != 0: # 가로
                rowSum = rowSum*10 + arr[row][col]
            else: # 세로면 total에 그동안 가로합 더하고 rowSum 초기화
                total += rowSum
                rowSum = 0
        total += rowSum
        rowSum = 0

    # 세로 합
    for col in range(m):
        for row in range(n):
            idx = row*m + col

            if i & (1<<idx) == 0: # 세로
                colSum = colSum*10 + arr[row][col]
            else:
                total += colSum
                colSum = 0
        total += colSum
        colSum = 0

    maxSum = max(maxSum, total)

print(maxSum)