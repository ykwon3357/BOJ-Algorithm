import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.*;

public class Main {
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		
		int n = Integer.parseInt(br.readLine()); 
		int[] arr = new int[n];
		for(int i=0; i<n; i++) {
			arr[i] = Integer.parseInt(br.readLine()); 
		}
		
		mergeSort(arr);
		
		for(int i=0; i<n; i++) {
			bw.write(Integer.toString(arr[i]));
			bw.newLine();
		}
		
		bw.close();
	}
	
	static int[] sorted; // 합치는 과정에서 정렬하여 원소를 담을 임시배열
	
	static void mergeSort(int[] a) {
		
		sorted = new int[a.length];
		mergeSort(a, 0, a.length - 1);
		sorted = null;
	}
	
	// Top-Down 방식 구현
	static void mergeSort(int[] a, int left, int right) {
		
//		left==right 즉, 부분리스트가 1개의 원소만 갖고있는경우 
//		더이상 쪼갤 수 없으므로 return한다.
		if(left == right) return;
		
		int mid = (left + right) / 2;	// 절반 위치 
		mergeSort(a, left, mid);		// 절반 중 왼쪽 부분리스트(left ~ mid)
		mergeSort(a, mid + 1, right);	// 절반 중 오른쪽 부분리스트(mid+1 ~ right)
		merge(a, left, mid, right);		// 병합작업
	}
	
	static void merge(int[] a, int left, int mid, int right) {
		int l = left;		// 왼쪽 부분리스트 시작점
		int r = mid + 1;	// 오른쪽 부분리스트의 시작점 
		int idx = left;		// 채워넣을 배열의 인덱스
		
		while(l <= mid && r <= right) {
//			왼쪽 부분리스트 l번째 원소가 오른쪽 부분리스트 r번째 원소보다 작거나 같을 경우
//			왼쪽의 l번째 원소를 새 배열에 넣고 l과 idx를 1 증가시킨다.
			if(a[l] <= a[r]) 
				sorted[idx++] = a[l++];
			else 
				sorted[idx++] = a[r++];
		}
//		왼쪽 부분리스트가 먼저 모두 새 배열에 채워졌을 경우 (l > mid)
//		= 오른쪽 부분리스트 원소가 아직 남아있을 경우
//		오른쪽 부분리스트의 나머지 원소들을 새 배열에 채워준다.
		if(l > mid) {
			while(r <= right) {
				sorted[idx++] = a[r++];
			}
		}
		else {
			while(l <= mid) {
				sorted[idx++] = a[l++];
			}
		}
		//정렬된 새 배열을 기존의 배열에 복사하여 옮겨준다.
		for(int i = left; i <= right; i++) {
			a[i] = sorted[i];
		}
	}

}
