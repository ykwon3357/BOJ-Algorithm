import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		int n, m;
		
		n = Integer.parseInt(st.nextToken());
		m = Integer.parseInt(st.nextToken());
		
		HashMap<Integer, Integer> event = new HashMap<>();
		int start, end;
		for(int i=0; i<n+m; i++) {
			st = new StringTokenizer(br.readLine());
			start = Integer.parseInt(st.nextToken());
			end = Integer.parseInt(st.nextToken());
			event.put(start, end);
		}
		boolean[] visited = new boolean[101];
		Queue<Point> q = new LinkedList<>();
		q.offer(new Point(1,0));
		
		int x, cnt, nx, ans=100;
		while(!q.isEmpty()) {
			Point p = q.poll();
			x = p.x;
			cnt = p.y;
			if(x == 100) {
				ans = Math.min(ans, cnt);
				System.out.println(ans);
				break;
			}
			
			for(int i=1; i<=6; i++) {
				nx = x+i;
				
				if(nx>100) continue;
				if(visited[nx]) continue;
				
				visited[nx] = true;
				if(event.get(nx)!=null) {
					q.offer(new Point(event.get(nx), cnt+1));
				}
				else {
					q.offer(new Point(nx, cnt+1));
				}
			}
		}
		
//		System.out.println(ans);
		
	}
	
	
	
	
}

class Point{
	int x, y;
	
	public Point(int x, int y) {
		this.x = x;
		this.y = y;
	}
}
