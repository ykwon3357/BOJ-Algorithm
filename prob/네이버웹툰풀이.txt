//1
import java.util.*;

class Solution {
    public int solution(int[] prices, int[] discounts) {
        int answer = 0;

        // 1. prices, discounts 배열을 내림차순 정렬
        Integer[] prices2 = Arrays.stream(prices).boxed().toArray(Integer[] :: new);
        Integer[] discounts2 = Arrays.stream(discounts).boxed().toArray(Integer[] :: new);
        Arrays.sort(prices2, Collections.reverseOrder());
        Arrays.sort(discounts2, Collections.reverseOrder());

        // 2. prices 배열크기만큼 돌면서
        for(int i=0; i<prices2.length; i++){

	// 2-1. discount 배열이 있는 경우 할인가 계산
            if(i<discounts2.length) {
                answer += Math.round((prices2[i]*((100-discounts2[i])/100.0)));
            }else {
                answer += prices2[i];
            }
        }
        
        return answer;
    }
}

//2
import java.util.*;

public class Main2 {

	public static void main(String[] args) {
		String s1 = "abcxyasdfasdfxyabc";
		String s2 = "abcxyqwertyxyabc";
		String s3 = "abcabcabcabc";
		String s4 = "llttaattll";
		String s5 = "zzzzzz";
		String s6 = "abcdef";
		for(String a:solution(s1)) {
			System.out.print(a+" ");
		}
		System.out.println();
		for(String a:solution(s2)) {
			System.out.print(a+" ");
		}
		System.out.println();
		for(String a:solution(s3)) {
			System.out.print(a+" ");
		}
		System.out.println();
		for(String a:solution(s4)) {
			System.out.print(a+" ");
		}
		System.out.println();
		for(String a:solution(s5)) {
			System.out.print(a+" ");
		}
		System.out.println();
		for(String a:solution(s6)) {
			System.out.print(a+" ");
		}
	}
	public static String[] solution(String s) {
		ArrayList<String> arr = new ArrayList<String>();
		int start = 0, end = s.length()-1;
		String[] answer = {};
		String mid = "";
		start = 0;
		end = s.length()-1;
		if(s.length()==1) {
			answer = new String[1];
			answer[0] = s;
			return answer;
		}
		for(int i=0; i<s.length()/2; i++) {
			if(s.substring(start,i+1).equals(s.substring(s.length()-1-i,end+1))) {
				arr.add(s.substring(start,i+1));
				start = i+1;
				end = s.length()-1-start;
			}
			else if(i==s.length()/2-1) {
				mid = s.substring(start,end+1);
			}
			
		}
		if(mid.equals("")) { // 중간값 없으면
			answer = new String[arr.size()*2];
			for(int i=0; i<answer.length; i++) {
				if(i>=arr.size()) {
					answer[i] = arr.get(answer.length-1-i);
				}else {
					answer[i] = arr.get(i);
				}
			}
		}else {
			answer = new String[arr.size()*2+1];
			for(int i=0; i<answer.length; i++) {
				if(i==arr.size()) {
					answer[i] = mid;
				}else if(i>arr.size()) {
					answer[i] = arr.get(answer.length-1-i);
				}else {
					answer[i] = arr.get(i);
				}
			}
		}
	
		return answer;
	}
	

}

3.
import java.util.*;

public class Main2 {
	public static void main(String[] args) {
		
		System.out.println(solution("aabcbcd", "abc")); // 2
		System.out.println(solution("aaaaabbbbb", "ab")); // 5
	}
	
	public static int solution(String s, String t) {
		
		Stack<Character> stack = new Stack<>();
		int len_t = t.length();
		int result = 0;
		
		for(int i=0; i<s.length(); i++) {

			// 1. 스택에 한 글자씩 넣는다
			stack.push((s.charAt(i)));

			// 2. 스택 사이즈가 제거할 문자열 길이이상이고, 스택 top과 제거할 문자열 마지막 글자가 같으면
			if(stack.size() >= len_t && stack.peek().equals(t.charAt(len_t-1))){
				boolean flag = true;

				// 2-1. 제거할 문자열 길이만큼 같은지 비교
				for(int j=0; j<len_t-1; j++) {
					if(!stack.get(stack.size()-2-j).equals(t.charAt(len_t-2-j))) {
						flag = false;
						break;
					}
				}

				// 2-2. 제거할 문자열 길이만큼 같다면 그만큼 스택 pop, 제거 카운트 + 1
				if(flag) {
					for(int j=0; j<len_t; j++) {
						stack.pop();
					}
					result ++;
				}
			}
		}
		
		return result;
	}
}

