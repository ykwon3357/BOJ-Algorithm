from collections import deque

n, m = map(int, input().split())
matrix = [list(input()) for _ in range(n)]
for i in range(1, n-1):
    for j in range(1, m-1):
        if matrix[i][j] == 'R':
            ri, rj = i,j
        elif matrix[i][j] == 'B':
            bi, bj = i,j

q = deque()
q.append((ri, rj, bi, bj, 1))
visited = [[[[0]*m for _ in range(n)] for _ in range(m)] for _ in range(n)]
visited[ri][rj][bi][bj] = 1
dx = [-1,1,0,0]
dy = [0,0,-1,1]

def move(x,y,dx,dy):
    cnt = 0 # 이동 칸 수
    # 다음칸이 벽이거나 현재 목적지일때까지
    while matrix[x+dx][y+dy] != '#' and matrix[x][y] != 'O': 
        x += dx
        y += dy
        cnt += 1
    return x, y, cnt

def bfs():
    while q:
        rx, ry, bx, by, depth = q.popleft()
        
        if depth > 10:
            break

        for i in range(4):
            nrx, nry, rcnt = move(rx,ry,dx[i],dy[i]) # red
            nbx, nby, bcnt = move(bx,by,dx[i],dy[i]) # blue

            if matrix[nbx][nby] != 'O': # blue가 목적지 아닌데
                if matrix[nrx][nry] == 'O': # red가 목적지면 성공
                    print(depth)
                    return
                if nrx == nbx and nry == nby: # 겹쳤을 때
                    if rcnt > bcnt: # 이동거리가 많은 구슬을 한칸 뒤로
                        nrx -= dx[i]
                        nry -= dy[i]
                    else:
                        nbx -= dx[i]
                        nby -= dy[i]
                if not visited[nrx][nry][nbx][nby]:
                    visited[nrx][nry][nbx][nby] = 1
                    q.append((nrx,nry,nbx,nby,depth+1))
    print(-1)
bfs()