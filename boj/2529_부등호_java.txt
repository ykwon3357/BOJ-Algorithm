import java.util.*;

public class Main {
	// 순열 앞부터 했을시 맨 처음 걸리는 값 = 최소
	// 뒤부터 했을시 맨 처음 = 최대
	static int k;
	static boolean[] visited;
	static int[] arr;
	static String[] sign;
	
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		k = sc.nextInt();
		sc.nextLine();
		arr = new int[k+1];
		sign = sc.nextLine().split(" ");
		
		visited = new boolean[10];
		backtracking(0, false); // 오름차순
		visited = new boolean[10];
		backtracking(0, true); // 내림차순
	}
	
	static boolean backtracking(int n, boolean forward) {
		if(n==(k+1)) {
			for(int i=0; i<sign.length; i++) {
				if(sign[i].equals("<")) {
					if(arr[i]>arr[i+1]) {
						return false;
					}
				}
				if(sign[i].equals(">")) {
					if(arr[i]<arr[i+1]) {
						return false;
					}
				}
			}
			String ans = "";
			for(int a: arr) {
				ans += a;
			}
			System.out.println(ans);
			return true;
		}
		
		if(forward) { // 오름차순 순열
			for(int i=0; i<10; i++) {
				if(!visited[i]) {
					arr[n] = i;
					visited[i] = true;
					if(backtracking(n+1, true))
						return true;
					visited[i] = false;
				}
			}
		}else { // 내림차순 순열
			for(int i=9; i>=0; i--) {
				if(!visited[i]) {
					arr[n] = i;
					visited[i] = true;
					if(backtracking(n+1, false))
						return true;
					visited[i] = false;
				}
			}
		}
		return false;
	}

}
